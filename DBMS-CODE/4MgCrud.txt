//1) Insert Data
// Insert sample data into the Teachers collection
db.Teachers.insertMany([
{
Tname: "John",
dno: 1,
dname: "Computer",
experience: 5,
salary: 12000,
date_of_joining: ISODate("2020-05-15")
},
{
Tname: "Alice",
dno: 2,
dname: "IT",
experience: 8,
salary: 15000,
date_of_joining: ISODate("2018-09-10")
},
{
Tname: "Bob",
dno: 3,
dname: "E&TC",
experience: 6,
salary: 11000,
date_of_joining: ISODate("2019-03-20")
},
{
Tname: "Praveen",
dno: 4,
dname: "Computer",
experience: 3,
salary: 9000,
date_of_joining: ISODate("2021-11-01")
}
]);

// Insert sample data into the Students collection
db.Students.insertMany([
{
Sname: "xyz",
roll_no: 1,
class: "A"
},
{
Sname: "Student2",
roll_no: 2,
class: "B"
},
{
Sname: "Student3",
roll_no: 3,
class: "A"
}
    
]);
//1. Find the information about all teachers alphabetically.

db.Teachers.find().sort({ Tname: 1 })
//2. Find the information about all teachers of the computer department

db.Teachers.find({ dname: "Computer" })
//3. Find the information about all teachers of computer,IT,and e&TC department

db.Teachers.find({ dname: { $in: ["Computer", "IT", "E&TC"] } })
//4. Find the information about all teachers of computer,IT,and E&TC department having salary greater than or equal to 10000/-

db.Teachers.find({
dname: { $in: ["Computer", "IT", "E&TC"] },
salary: { $gte: 10000 }
})

//6. Find the student information having roll_no = 2 or Sname=xyz
db.Students.find({ $or: [{ roll_no: 2 }, { Sname: "xyz" }] })

//7. Update the experience of teacher-praveen to 10 years, if the entry is not available in database consider the entry as new entry.

db.Teachers.update(
{ Tname: "Praveen" },
{ $set: { experience: 10 } },
{ upsert: true }
)
//9. Update the department of all the teachers working in IT department to COMP

db.Teachers.updateMany(
{ dname: "IT" },
{ $set: { dname: "COMP" } }
)
//10. find the teacher's name and their experience from teachersâ€™ collection

db.Teachers.find({}, { Tname: 1, experience: 1, _id: 0 })
//11. Delete all the documents from teacher's collection having IT dept.

db.Teachers.deleteMany({ dname: "IT" })
//12. display with pretty() method, the first 3 documents in teacher's collection in ascending order.
db.Teachers.find().limit(3).sort({ Tname: 1 }).pretty()